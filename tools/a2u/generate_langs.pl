#!perl -w
# Author: Jim Park

use FileHandle;
use POSIX qw(asctime);

our @includes = (".");

if (exists $ENV{INCLUDE})
{
	push @includes, split /;/, $ENV{INCLUDE};
}

sub look_for_header($)
{
	my $file = shift;
	my $path;

	# look for winnt.h
	foreach $path (@includes)
	{
		if (-f "$path/$file")
		{
			return "$path/$file";
		}
	}
	return undef;
}

# This function is used to allow you to tabulate Here Documents and
# automagically remove the extra tabs and so forth.
# For example, you can do the following:
# $poem = dequote <<EVER_ON_AND_ON;
#     Now far ahead the Road has gone,
#         And I must follow, if I can,
#     Pursuing it with eager feet,
#         Until it joins some larger way
#     Where many paths and errands meet.
#         And whither then?  I cannot say.
#             --Bilbo in /usr/src/perl/pp_ctl.c
# EVER_ON_AND_ON
# This generates a string that looks like:
#
# Now far ahead the Road has gone,
#     And I must follow, if I can,
# Pursuing it with eager feet,
#     Until it joins some larger way
# Where many paths and errands meet.
#     And whither then?  I cannot say.
#         --Bilbo in /usr/src/perl/pp_ctl.c
#
# You can also have a prefix character:
# my $c_code = dequote<<'    MAIN_INTERPRETER_LOOP';
#     @@@ int
#     @@@ runops() {
#     @@@     SAVEI32(runlevel);
#     @@@     runlevel++;
#     @@@     while ( op = (*op->ppaddr)() );
#     @@@     TAINT_NOT;
#     @@@     return 0;
#     @@@ }
#     MAIN_INTERPRETER_LOOP
#
# From Perl Cookbook pg. 25

sub dequote($)
{
	my $line = shift;
	my ($white, $leader);

	if ($line =~ /^\s*(?:([^\w\s]+)(\s*).*\n)(?:\s*\1\2?.*\n)+$/)
	{
		($white, $leader) = ($2, quotemeta($1));
	}
	else
	{
		($white, $leader) = ($line =~ /^(\s+)/, '');
	}
	$line =~ s/^\s*?$leader(?:$white)?//gm;
	return $line;
}

sub print_output($\%)
{
	my $filename = shift;
	my $langs = shift;
	my $fh = new FileHandle;
	my $def = "_" . uc $filename . "_";
	my $date = asctime(localtime());

	$fh->open(">$filename") or die "Can't open $filename for writing!";

	print $fh dequote<<"	END_OF_TEXT";
		// Author: Jim Park
		// This file is auto-generated by $0
		//   on $date

	END_OF_TEXT

	my $lang; 

	foreach $lang (sort keys %{$langs->{LANGID}})
	{
		print $fh "\tthis->AddLanguage(_T(\"$lang\"), $langs->{LANGID}{$lang});\n";
	}

	$fh->close();
}

sub main()
{
	my $winnt_path = look_for_header("winnt.h");
	my $output = "langs.h";

	if (defined $winnt_path)
	{
		my $fh = new FileHandle;

		$fh->open($winnt_path) or die "Can't open $winnt_path for reading!";

		my %langs = ();

		while (<$fh>)
		{
			if (/^#define\s+(LANG_(\w+))/)
			{
				$langs{PRIMARY}{$2} = $1;
				$langs{LANGID}{$2}  = "MAKELANGID($1, SUBLANG_NEUTRAL)";
			}
			elsif (/^#define\s+(SUBLANG_(([A-Z]+)\w*))/)
			{
				my $macro = $1;
				my $sublang = $2;
				my $primary = $3;

				$langs{SUBLANG}{$sublang} = $macro;

				if (exists $langs{PRIMARY}{$primary})
				{
					$langs{LANGID}{$2} = "MAKELANGID($langs{PRIMARY}{$primary}, $macro)";
				}
			}
		}

		$fh->close();

		print_output($output, %langs);
	}
}

main();
